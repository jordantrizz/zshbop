#!/usr/bin/perl
# Usage: adddb <user> <database name>
# Example: addwww <user> <database name>

# User defined variables 
# Is the script running as root?

$user = `/usr/bin/id`;

if($user !~ m/root/) {
      print "This should be ran as the user root.\n";
      exit;
}

# Check arguement syntax and set vars

#print $ARGV[1];
#print $ARGV[2];


if(!$ARGV[0]) {
        print "A script for creating mysql databases.\nUsage: adddb <user> <database name> <optional-password>\nExample: $0 barry barry_wp\n";
        exit;
}

if(!$ARGV[1]) {
        print "A script for creating mysql databases.\nUsage: adddb <user> <database name> <optional-password>\nExample: $0 barry barry_wp\n";
        exit;
                        
}       

# Check username length.

if(length($ARGV[0]) >= "17") {
        print "Username has to be 16 or less. Please shorten the username\n";
        exit;
}

# Check databsae name for "-".
if(rindex($ARGV[1],"-") != "-1") {
        print "Database Name has a \"-\" in it, not allowed.\n";
        exit;
}

$dbuser = $ARGV[0];
$dbname = $ARGV[1];

# Check databsae name for "-".
if($ARGV[2]) {
        $dbpass = $ARGV[2];
} else {
        $dbpass = randomPassword(12);
}

# Print what configuration is going to look like.
print "Creating the following database.";
print "\n\nDatabase Name: $dbname";
print "\nDatabase Username: $dbuser";
print "\nDatabase Password: $dbpass";

# Ask to proceed

if($proceed eq ""){
        $proceed = &read_bool("\n\nProceed with the above?","");

        if ($proceed eq "0") {
                exit;
        };
        
        if ($proceed eq "1") {
                create_database();      
        };


        }
        
# Subroutines

sub read_bool {
        local($prompt,$def) = @_;
        $ans = -1;
        until($ans >= 0){
                print $prompt,"[",$def,"] (y/n):";
                $| = 1;
                $_ = <STDIN>;
                chop;
                $_ = $_ ? $_ : $def;
                $_ = substr($_, 0, 1);
                if ($_ eq "y" || $_ eq "Y"){
                        $ans = 1;
                }elsif ($_ eq "n" || $_ eq "N"){
                        $ans = 0;
                }else {
                        print "Please enter y or n.\n";
                }
        }
        return $ans;
}

sub create_database {

my $create_db = "mysql -e'CREATE DATABASE $dbname;'";
print("\n\nCreating Database...\n$create_db\n");
if (system($create_db)) {
        print "\nCouldn't create database...\n";
        exit;
}
print("\n\nDatabase Created Successfully!\n");


my $create_perm = "mysql -e'GRANT ALL ON $dbname.* TO $dbuser\@localhost IDENTIFIED BY \"$dbpass\";'";
print("\n\nCreating Permissions...\n$create_perm\n");
if (system($create_perm)) {
        print "\nCouldn't create permissions...\n";
        exit;
}
print("\n\nPermissions Created Successfully!\n");

                        
}

#!/usr/bin/perl

sub randomPassword {
my $password;
my $_rand;

my $password_length = $_[0];
        if (!$password_length) {
                $password_length = 10;
        }

my @chars = split(" ","a b c d e f g h i j k l m n o p q r s t u v w x y z ! # ^ * + A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9");

srand;

for (my $i=0; $i <= $password_length ;$i++) {
        $_rand = int(rand 67);
        $password .= $chars[$_rand];
}
return $password;
}
